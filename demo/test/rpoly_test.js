'use strict'; // -*- js2 -*-

/* Test suite for `rpoly`.
 *
 * The test polynomials are taken from Zhonggang Zeng's MULTROOT MatLab
 * package.  See
 *
 *    http://homepages.neiu.edu/~zzeng/Papers/zrootpak.pdf
 *
 * for an explanation.
 *
 * This file can be run as a standalone script or as a Mocha test.  In script
 * mode, the usage is as follows:
 *
 *   1.  `node roots_test.js export FILENAME [poly1, poly2, ...]`
 *       Export test polynomials to `FILENAME`.  If `poly1, poly2, ...` are
 *       specified, export only those polynomials.  The format of the file is
 *       specified in `readPolys`.
 *
 *   2.  `node roots_test.js [import (z|zFortran):FILENAME]* [poly1, poly2, ...]`
 *       Evaluate `rpoly` against the test polynomials.  Any number of `import`
 *       statements can be specified; polynomials will be read from `FILENAME`
 *       (which has the same format as the exported files above) and those
 *       polynomials will be tested as well.  The `z:` or `zFortran:` prefix
 *       specifies whether the roots found in `FILENAME` are accurate roots or
 *       roots generated by the Fortran code from which `rpoly` was translated.
 *       If `poly1, poly2, ...` are specified, only those polynomials are
 *       tested.
 *
 * In Mocha mode, only the standard test polynomials are evaluated.  The output
 * of the Fortran code is read from `testpolys-out.txt` in the same directory;
 * the test is successful if the Javascript code produces the same results as
 * the Fortran code.  (In particular, the accurate roots are never considered,
 * as both algorithms can do poorly on some of the test polynomials).
 *
 * The Javascript code happens to compute the same numbers as the Fortran code
 * on the standard test polynomials in this file, but this will not always be
 * the case: Javascript and Fortran's implementations of the `exp` function
 * differ slightly, and will sometimes compute numbers that differ by one bit.
 * In my experiments, this happens roughly in one out of 100--1000 polynomials.
 * This small difference can snowball into larger differences in later roots of
 * large polynomials.
 *
 * The fortran code can be found in `493.FOR` in the current directory.  It has
 * been modified slightly to use the real64 kind (which is binary64, the same as
 * Javascript), and to be able to read and write files in the same format as
 * used by this program.
 */

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { once } from 'events';

import should from 'should';

import rpoly from '../lib/rpoly.js';
import Complex from '../lib/complex.js';
import Polynomial from '../lib/polynomial.js';

// Utility
export function* range(a, b=undefined, step=1, map=i=>i) {
    let min, max;
    if(b === undefined)
        [min, max] = [0, a];
    else
        [min, max] = [a, b];
    if(step > 0) {
        for(let i = min; i < max; i += step)
            yield map(i);
    } else {
        for(let i = min; i > max; i += step)
            yield map(i);
    }
}

export function constant(x, count) {
    return range(0, count, 1, ()=>x);
}

// Convenience
function C(a,b=0) {
    if(a instanceof Complex)
        return a;
    return new Complex(a, b);
}
const fact = k => [...range(1, k+1)].reduce((a, i) => a*i, 1);
const P = Polynomial.create;
const PR = (...z) => ({p: Polynomial.fromRoots(...z), z: z});
const Exp = Complex.fromPolar;
const π = Math.PI;


/* Flatten a list of roots.
 *
 * The parameter `z` is an Array of entries in one of the following forms:
 *  1. a number,
 *  2. a Complex number,
 *  3. an Array `[r, m]`, where `r` is a number or a Complex number and `m` is a
 *     positive integer multiplicity.
 *  This routine promotes all numbers to Complex numbers, and replaces `[r, m]`
 *  with `m` copies of `r`.
 */
const flattenRoots = z => z.flatMap(r => {
    if(r instanceof Complex) return [r];
    if(r instanceof Array) {
        let [c, m] = r;
        return [...range(0, m, 1, ()=>C(c))];
    }
    return [C(r)];
});


/* Read a list of polynomials from a file.
 *
 * This is used for communicating polynomial data to/from Fortran.
 *
 * The filename specified is relative to the current working directory.  The
 * contents must consist of consecutive blocks of the following form:
 *   1. a line containing the name of the polynomial,
 *   2. a line containing the integer degree `deg` of the polynomial,
 *   3. `deg+1` lines containing the (real) coefficients,
 *   4. `deg` lines of the form `re im` specifying the roots (as computed in
 *      some way).
 * The polynomial named `name` is stored in `obj[name]` as `obj[name].p` (unless
 * this property already exists), and the roots are stored in
 * `obj[name][rootsName]`.
 */
async function readPolys(filename, obj, rootsName) {
    const rl = readline.createInterface({
        input: fs.createReadStream(filename)
    });
    let name, poly, deg, roots, coeffs;
    let state="done";
    const root_re = /\s*(\S+)\s+(\S+)/;
    rl.on('line', line => {
        if(state === "done") {
            name = line.trim();
            if(obj[name] === undefined)
                obj[name] = {};
            poly = obj[name];
            coeffs = [];
            roots = [];
            state = "deg";
            return;
        } else if(state === "deg") {
            deg = parseInt(line.trim());
            state = "coeffs";
        } else if(state === "coeffs") {
            coeffs.push(parseFloat(line.trim()));
            if(coeffs.length == deg + 1)
                state = "roots";
        } else if(state === "roots") {
            if(line.trim() === "FAIL") {
                roots = "FAIL";
            } else {
                const [, real, im] = root_re.exec(line);
                roots.push(C(parseFloat(real), parseFloat(im)));
            }
            if(roots === "FAIL" || roots.length === deg) {
                state = "done";
                if(poly.p === undefined)
                    poly.p = Polynomial.create(...coeffs);
                poly[rootsName] = roots;
            }
        }
    });
    await once(rl, 'close');
}


/* Test polynomial specifications. */
const jt01 = a => ({p: P(1,-1,-(a**2),a**2), z: [a, -a, 1]});
const jt07 = a => PR(.001, .01, .1, C(.1, a), C(.1,-a), 1, -10);
const jt10 = a => PR(a, 1, 1/a);
const jt11 = m => PR(...range(1-m, m,     1, k => Exp( 1, k*π/(2*m))),
                     ...range(m,   3*m+1, 1, k => Exp(.9, k*π/(2*m))));
const uhlig = a => PR([a, 5], -a, C(0, a), C(0, -a));
const fib = n => ({p: P(1, ...constant(-1, n)), z: fibz[n]});
const fibsq = n => ({p: P(1, ...constant(-1, n)).pow(2),
                     z: fibz[n].concat(fibz[n])});
const lgd = n => ({p: Polynomial.legendre(n), z: lgdz[n]});
const fl = k => PR([4, k], [3, 2*k], [2, 3*k], [1, 4*k]);
const iliev = k => PR([1, k], [2, 2*k], [3, 3*k]);
const twin = k => PR([.39, k], [.4, k], [-.2, k]);
const triple = (m, n, k) => PR([0.9, m], [1, n], [1.1, k]);
const near = ε => PR([1-ε, 20], [1, 20], [-.5, 5]);
const large01 = PR(C(   -1,  0.3),
                   C(   -1, -0.3),
                   C(  -.9,  0.4),
                   C( -0.9, -0.4),
                   C( -0.7,  0.7),
                   C( -0.7, -0.7),
                   C( -0.4,  0.9),
                   C( -0.4, -0.9),
                   C( -0.0,  1.1),
                   C(    0, -1.1),
                   C(  1.2,    0),
                   C(  1.0,    0),
                   C(  0.9,  0.4),
                   C(  0.9, -0.4),
                   C(  0.6,  0.6),
                   C(  0.6, -0.6),
                   C(  0.4,  0.9),
                   C(  0.4, -0.9),
                   C(    0,  0.8),
                   C(    0, -0.8));
const large02 = {p: large01.p.pow(2), z: large01.z.concat(large01.z)};
const large03 = {p: large02.p.pow(2), z: large02.z.concat(large02.z)};

const jt09z = [...range(0, 10, 1, i => Exp(.01, 2*π*i/10))]
      .concat([...range(0, 10, 1, i => Exp(100, (2*i+1)*π/10))]);

/* Roots of some of the test polynomials must be determined numerically (using
 * other software known to produce accurate results).
 */
const fibz = {
    4:   [C(  -7.7480411321543385e-1,                        0),
          C(    1.9275619754829253e0,                        0),
          C(  -7.6378931133745725e-2,   -8.1470364717038653e-1),
          C(  -7.6378931133745725e-2,    8.1470364717038653e-1)],
    5:   [C(    1.9659482366454853e0,                        0),
          C(  -6.7835071296999671e-1,   -4.5853618727314450e-1),
          C(  -6.7835071296999671e-1,    4.5853618727314450e-1),
          C(   1.9537659464725405e-1,   -8.4885364054624555e-1),
          C(   1.9537659464725405e-1,    8.4885364054624555e-1)],
    8:   [C(  -8.7628623001824603e-1,                        0),
          C(    1.9960311797354146e0,                        0),
          C(  -6.4160538947257643e-1,   -6.0639522060577223e-1),
          C(  -6.4160538947257643e-1,    6.0639522060577223e-1),
          C(   6.2867323922464233e-1,   -7.0847256922735767e-1),
          C(   6.2867323922464233e-1,    7.0847256922735767e-1),
          C(  -4.6940324610650182e-2,   -9.0302346612291778e-1),
          C(  -4.6940324610650182e-2,    9.0302346612291778e-1)],
    10:  [C(  -8.9903109419571832e-1,                        0),
          C(    1.9990186327101011e0,                        0),
          C(  -7.3993339950965029e-1,   -5.1679653650155624e-1),
          C(  -7.3993339950965029e-1,    5.1679653650155624e-1),
          C(   7.5672898690932433e-1,   -6.0388774056521671e-1),
          C(   7.5672898690932433e-1,    6.0388774056521671e-1),
          C(  -3.1302595872655452e-1,   -8.5835474825052466e-1),
          C(  -3.1302595872655452e-1,    8.5835474825052466e-1),
          C(   2.4623660206968907e-1,   -9.0132800595093743e-1),
          C(   2.4623660206968907e-1,    9.0132800595093743e-1)],
    15:  [C(    1.9999694754345033e0,                        0),
          C(  -9.1158495217659696e-1,   -1.8963594977336400e-1),
          C(  -9.1158495217659696e-1,    1.8963594977336400e-1),
          C(   8.9317440049708454e-1,   -4.2406403414204448e-1),
          C(   8.9317440049708454e-1,    4.2406403414204448e-1),
          C(  -7.6207853956362610e-1,   -5.3886395642555469e-1),
          C(  -7.6207853956362610e-1,    5.3886395642555469e-1),
          C(   6.2535688829297788e-1,   -7.4241144946787546e-1),
          C(   6.2535688829297788e-1,    7.4241144946787546e-1),
          C(  -4.8580380586187218e-1,   -8.0239021235279910e-1),
          C(  -4.8580380586187218e-1,    8.0239021235279910e-1),
          C(   2.6576427448755774e-1,   -9.1836947759116038e-1),
          C(   2.6576427448755774e-1,    9.1836947759116038e-1),
          C(  -1.2481300339277657e-1,   -9.3710299587939022e-1),
          C(  -1.2481300339277657e-1,    9.3710299587939022e-1)],
    16:  [C(  -9.3492165241041822e-1,                        0),
          C(    1.9999847393479441e0,                        0),
          C(  -8.6731618540706429e-1,   -3.5153102117566761e-1),
          C(  -8.6731618540706429e-1,    3.5153102117566761e-1),
          C(   9.0664993185527330e-1,   -3.9899262581327113e-1),
          C(   9.0664993185527330e-1,    3.9899262581327113e-1),
          C(  -6.7362115804463244e-1,   -6.5372568702010359e-1),
          C(  -6.7362115804463244e-1,    6.5372568702010359e-1),
          C(   6.6773178311010872e-1,   -7.0989878243729971e-1),
          C(   6.6773178311010872e-1,    7.0989878243729971e-1),
          C(  -3.7997846431327533e-1,   -8.6370461425579052e-1),
          C(  -3.7997846431327533e-1,    8.6370461425579052e-1),
          C(   3.4006990245660862e-1,   -8.9889103233023357e-1),
          C(   3.4006990245660862e-1,    8.9889103233023357e-1),
          C(  -2.6067353125781528e-2,   -9.5054120934206800e-1),
          C(  -2.6067353125781528e-2,    9.5054120934206800e-1)],
    20:  [C(  -9.4738854741098545e-1,                        0),
          C(    1.9999990463165885e0,                        0),
          C(  -9.0292309988448659e-1,   -2.8844219942163452e-1),
          C(  -9.0292309988448659e-1,    2.8844219942163452e-1),
          C(   9.4163948285142351e-1,   -3.2137767833844892e-1),
          C(   9.4163948285142351e-1,    3.2137767833844892e-1),
          C(  -7.7347514417519085e-1,   -5.5046692254401848e-1),
          C(  -7.7347514417519085e-1,    5.5046692254401848e-1),
          C(   7.8340639736133058e-1,   -5.9694232890817117e-1),
          C(   7.8340639736133058e-1,    5.9694232890817117e-1),
          C(  -5.7054111480903318e-1,   -7.6194988906254718e-1),
          C(  -5.7054111480903318e-1,    7.6194988906254718e-1),
          C(   5.5299565672450635e-1,   -8.0316008194147015e-1),
          C(   5.5299565672450635e-1,    8.0316008194147015e-1),
          C(  -3.1215256515492634e-1,   -9.0313546425844951e-1),
          C(  -3.1215256515492634e-1,    9.0313546425844951e-1),
          C(   2.7604389850657602e-1,   -9.2674178704922163e-1),
          C(   2.7604389850657602e-1,    9.2674178704922163e-1),
          C(  -2.1298760873001045e-2,   -9.6028914964897597e-1),
          C(  -2.1298760873001045e-2,    9.6028914964897597e-1)],
    24:  [C(  -9.5584671907435652e-1,                        0),
          C(    1.9999999403953126e0,                        0),
          C(  -9.2440836564601808e-1,   -2.4425758119312587e-1),
          C(  -9.2440836564601808e-1,    2.4425758119312587e-1),
          C(   9.6029969188593241e-1,   -2.6816789087973298e-1),
          C(   9.6029969188593241e-1,    2.6816789087973298e-1),
          C(  -8.3206779146067126e-1,   -4.7277840609497671e-1),
          C(  -8.3206779146067126e-1,    4.7277840609497671e-1),
          C(   8.4901948650232816e-1,   -5.1005885108548894e-1),
          C(   8.4901948650232816e-1,    5.1005885108548894e-1),
          C(  -6.8462500330323014e-1,   -6.7079626414701662e-1),
          C(  -6.8462500330323014e-1,    6.7079626414701662e-1),
          C(   6.8086190031991680e-1,   -7.0945070400011447e-1),
          C(   6.8086190031991680e-1,    7.0945070400011447e-1),
          C(  -4.9134335769895337e-1,   -8.2542189066572255e-1),
          C(  -4.9134335769895337e-1,    8.2542189066572255e-1),
          C(   4.7034491872064894e-1,   -8.5619893076494434e-1),
          C(   4.7034491872064894e-1,    8.5619893076494434e-1),
          C(  -2.6437306032030299e-1,   -9.2642408801835552e-1),
          C(  -2.6437306032030299e-1,    9.2642408801835552e-1),
          C(   2.3221581705521862e-1,   -9.4329436256232674e-1),
          C(   2.3221581705521862e-1,    9.4329436256232674e-1),
          C(  -1.8000846715347130e-2,   -9.6682984659153325e-1),
          C(  -1.8000846715347130e-2,    9.6682984659153325e-1)],
    30:  [C(  -9.6442542043886591e-1,                        0),
          C(    1.9999999990686774e0,                        0),
          C(  -9.4394468102074130e-1,   -1.9842940626810229e-1),
          C(  -9.4394468102074130e-1,    1.9842940626810229e-1),
          C(   9.7520283562201787e-1,   -2.1429994512214341e-1),
          C(   9.7520283562201787e-1,    2.1429994512214341e-1),
          C(  -8.8334069813838514e-1,   -3.8857175122118726e-1),
          C(  -8.8334069813838514e-1,    3.8857175122118726e-1),
          C(   9.0376373909403643e-1,   -4.1553159394260884e-1),
          C(   9.0376373909403643e-1,    4.1553159394260884e-1),
          C(  -7.8509399601222624e-1,   -5.6247440461564773e-1),
          C(  -7.8509399601222624e-1,    5.6247440461564773e-1),
          C(   7.9208053422797420e-1,   -5.9412795915188416e-1),
          C(   7.9208053422797420e-1,    5.9412795915188416e-1),
          C(  -6.5322629840535212e-1,   -7.1283938462668728e-1),
          C(  -6.5322629840535212e-1,    7.1283938462668728e-1),
          C(   6.4715686014711653e-1,   -7.4341084108855160e-1),
          C(   6.4715686014711653e-1,    7.4341084108855160e-1),
          C(  -4.9313686970169811e-1,   -8.3331562648083823e-1),
          C(  -4.9313686970169811e-1,    8.3331562648083823e-1),
          C(   4.7616393907118528e-1,   -8.5830457968853556e-1),
          C(   4.7616393907118528e-1,    8.5830457968853556e-1),
          C(  -3.1138343105991057e-1,   -9.1875047848576055e-1),
          C(  -3.1138343105991057e-1,    9.1875047848576055e-1),
          C(   2.8667573088427608e-1,   -9.3499271969664691e-1),
          C(   2.8667573088427608e-1,    9.3499271969664691e-1),
          C(  -1.1541755823522570e-1,   -9.6538885112748154e-1),
          C(  -1.1541755823522570e-1,    9.6538885112748154e-1),
          C(   8.6712604212027045e-2,   -9.7100990190851142e-1),
          C(   8.6712604212027045e-2,    9.7100990190851142e-1)],
    32:  [C(  -9.6658923871653323e-1,                        0),
          C(    1.9999999997671694e0,                        0),
          C(  -9.4850920658671691e-1,   -1.8672221821293762e-1),
          C(  -9.4850920658671691e-1,    1.8672221821293762e-1),
          C(   9.7834925033585204e-1,   -2.0078089020071972e-1),
          C(   9.7834925033585204e-1,    2.0078089020071972e-1),
          C(  -8.9492239875104395e-1,   -3.6656884583560827e-1),
          C(  -8.9492239875104395e-1,    3.6656884583560827e-1),
          C(   9.1561296486960066e-1,   -3.9091021726017816e-1),
          C(   9.1561296486960066e-1,    3.9091021726017816e-1),
          C(  -8.0776515691388288e-1,   -5.3290949432538767e-1),
          C(  -8.0776515691388288e-1,    5.3290949432538767e-1),
          C(   8.1676605148469210e-1,   -5.6227783456196806e-1),
          C(   8.1676605148469210e-1,    5.6227783456196806e-1),
          C(  -6.9018718621020084e-1,   -6.7959500617448794e-1),
          C(  -6.9018718621020084e-1,    6.7959500617448794e-1),
          C(   6.8743109908898079e-1,   -7.0904710257820566e-1),
          C(   6.8743109908898079e-1,    7.0904710257820566e-1),
          C(  -5.4643832802996968e-1,   -8.0117541582256712e-1),
          C(  -5.4643832802996968e-1,    8.0117541582256712e-1),
          C(   5.3340817672925079e-1,   -8.2670641358738332e-1),
          C(   5.3340817672925079e-1,    8.2670641358738332e-1),
          C(  -3.8171612372546165e-1,   -8.9309148142372712e-1),
          C(  -3.8171612372546165e-1,    8.9309148142372712e-1),
          C(   3.6081864233775731e-1,   -9.1173561255896825e-1),
          C(   3.6081864233775731e-1,    9.1173561255896825e-1),
          C(  -2.0198015346613033e-1,   -9.5183217137340125e-1),
          C(  -2.0198015346613033e-1,    9.5183217137340125e-1),
          C(   1.7616780779247976e-1,   -9.6163812911775117e-1),
          C(   1.7616780779247976e-1,    9.6163812911775117e-1),
          C(  -1.3740819480525255e-2,   -9.7505138072473080e-1),
          C(  -1.3740819480525255e-2,    9.7505138072473080e-1)],
    48:  [C(  -9.7752531063420516e-1,                        0),
          C(    1.9999999999999964e0,                        0),
          C(  -9.6931284787894928e-1,   -1.2673623119858259e-1),
          C(  -9.6931284787894928e-1,    1.2673623119858259e-1),
          C(   9.9071539938594998e-1,   -1.3318610552668582e-1),
          C(   9.9071539938594998e-1,    1.3318610552668582e-1),
          C(  -9.4481029198855149e-1,   -2.5136556593383600e-1),
          C(  -9.4481029198855149e-1,    2.5136556593383600e-1),
          C(   9.6321747238759383e-1,   -2.6345282222320321e-1),
          C(   9.6321747238759383e-1,    2.6345282222320321e-1),
          C(  -9.0441993172540383e-1,   -3.7181540660113982e-1),
          C(  -9.0441993172540383e-1,    3.7181540660113982e-1),
          C(   9.1844526353244977e-1,   -3.8818039878436823e-1),
          C(   9.1844526353244977e-1,    3.8818039878436823e-1),
          C(  -8.4880492426363578e-1,   -4.8608117801733620e-1),
          C(  -8.4880492426363578e-1,    4.8608117801733620e-1),
          C(   8.5767326720597287e-1,   -5.0514744834531745e-1),
          C(   8.5767326720597287e-1,    5.0514744834531745e-1),
          C(  -7.7887843849488758e-1,   -5.9225890894752629e-1),
          C(  -7.7887843849488758e-1,    5.9225890894752629e-1),
          C(   7.8234145728355848e-1,   -6.1247088140995496e-1),
          C(   7.8234145728355848e-1,    6.1247088140995496e-1),
          C(  -6.9578871296265537e-1,   -6.8857612174158136e-1),
          C(  -6.9578871296265537e-1,    6.8857612174158136e-1),
          C(   6.9399773958822237e-1,   -7.0852241871498371e-1),
          C(   6.9399773958822237e-1,    7.0852241871498371e-1),
          C(  -6.0090028217751530e-1,   -7.7342050498751064e-1),
          C(  -6.0090028217751530e-1,    7.7342050498751064e-1),
          C(   5.9429534550831126e-1,   -7.9188330212002951e-1),
          C(   5.9429534550831126e-1,    7.9188330212002951e-1),
          C(  -4.9577169295789763e-1,   -8.4536587604499384e-1),
          C(  -4.9577169295789763e-1,    8.4536587604499384e-1),
          C(   4.8499901127517033e-1,   -8.6133485684467917e-1),
          C(   4.8499901127517033e-1,    8.6133485684467917e-1),
          C(  -3.8213009781646879e-1,   -9.0319497857790855e-1),
          C(  -3.8213009781646879e-1,    9.0319497857790855e-1),
          C(   3.6798284141675292e-1,   -9.1586775459857605e-1),
          C(   3.6798284141675292e-1,    9.1586775459857605e-1),
          C(  -2.6184317603555805e-1,   -9.4591870370262604e-1),
          C(  -2.6184317603555805e-1,    9.4591870370262604e-1),
          C(   2.4521767692198283e-1,   -9.5469749369203396e-1),
          C(   2.4521767692198283e-1,    9.5469749369203396e-1),
          C(  -1.3688889700777692e-1,   -9.7279137105157509e-1),
          C(  -1.3688889700777692e-1,    9.7279137105157509e-1),
          C(   1.1875018304262661e-1,   -9.7727961544160135e-1),
          C(   1.1875018304262661e-1,    9.7727961544160135e-1),
          C(  -9.3237089221868790e-3,   -9.8332175729838703e-1),
          C(  -9.3237089221868790e-3,    9.8332175729838703e-1)],
    50:  [C(  -9.7840871874832598e-1,                        0),
          C(    1.9999999999999991e0,                        0),
          C(  -9.7082704538071374e-1,   -1.2183552106301812e-1),
          C(  -9.7082704538071374e-1,    1.2183552106301812e-1),
          C(   9.9146919303422745e-1,   -1.2779166385120583e-1),
          C(   9.9146919303422745e-1,    1.2779166385120583e-1),
          C(  -9.4819694309685236e-1,   -2.4180209209792345e-1),
          C(  -9.4819694309685236e-1,    2.4180209209792345e-1),
          C(   9.6617251910577981e-1,   -2.5302092706967823e-1),
          C(   9.6617251910577981e-1,    2.5302092706967823e-1),
          C(  -9.1086142754114578e-1,   -3.5805886201581475e-1),
          C(  -9.1086142754114578e-1,    3.5805886201581475e-1),
          C(   9.2489899766969340e-1,   -3.7336474585672312e-1),
          C(   9.2489899766969340e-1,    3.7336474585672312e-1),
          C(  -8.5938642568327230e-1,   -4.6882074291412711e-1),
          C(  -8.5938642568327230e-1,    4.6882074291412711e-1),
          C(   8.6873573566197437e-1,   -4.8682779417476777e-1),
          C(   8.6873573566197437e-1,    4.8682779417476777e-1),
          C(  -7.9455222113286934e-1,   -5.7238521093836574e-1),
          C(  -7.9455222113286934e-1,    5.7238521093836574e-1),
          C(   7.9892492393080634e-1,   -5.9170301597053960e-1),
          C(   7.9892492393080634e-1,    5.9170301597053960e-1),
          C(  -7.1734166443283074e-1,   -6.6715782691954022e-1),
          C(  -7.1734166443283074e-1,    6.6715782691954022e-1),
          C(   7.1680859970484164e-1,   -6.8650512098656773e-1),
          C(   7.1680859970484164e-1,    6.8650512098656773e-1),
          C(  -6.2892533274022403e-1,   -7.5167607737131967e-1),
          C(  -6.2892533274022403e-1,    7.5167607737131967e-1),
          C(   6.2382181322124103e-1,   -7.6993019442699420e-1),
          C(   6.2382181322124103e-1,    7.6993019442699420e-1),
          C(  -5.3064387277531735e-1,   -8.2463115899167031e-1),
          C(  -5.3064387277531735e-1,    8.2463115899167031e-1),
          C(   5.2149696748998032e-1,   -8.4084433817864726e-1),
          C(   5.2149696748998032e-1,    8.4084433817864726e-1),
          C(  -4.2398780852065287e-1,   -8.8488735694432355e-1),
          C(  -4.2398780852065287e-1,    8.8488735694432355e-1),
          C(   4.1146333355600602e-1,   -8.9828916187082988e-1),
          C(   4.1146333355600602e-1,    8.9828916187082988e-1),
          C(  -3.1057514121689004e-1,   -9.3149869821615708e-1),
          C(  -3.1057514121689004e-1,    9.3149869821615708e-1),
          C(   2.9543847053132634e-1,   -9.4149388071538270e-1),
          C(   2.9543847053132634e-1,    9.4149388071538270e-1),
          C(  -1.9212711476967937e-1,   -9.6372259554211709e-1),
          C(  -1.9212711476967937e-1,    9.6372259554211709e-1),
          C(   1.7521270971337403e-1,   -9.6988823979093247e-1),
          C(   1.7521270971337403e-1,    9.6988823979093247e-1),
          C(  -7.0442566960330782e-2,   -9.8103023421008712e-1),
          C(  -7.0442566960330782e-2,    9.8103023421008712e-1),
          C(   5.2628660005691386e-2,   -9.8311349362214451e-1),
          C(   5.2628660005691386e-2,    9.8311349362214451e-1)],
    100: [C(  -9.8910997362260916e-1,                        0),
          C(    2.0000000000000000e0,                        0),
          C(  -9.8717531047185343e-1,   -6.1902458727460587e-2),
          C(  -9.8717531047185343e-1,    6.1902458727460587e-2),
          C(   9.9794642297459865e-1,   -6.3418735804457100e-2),
          C(   9.9794642297459865e-1,    6.3418735804457100e-2),
          C(  -9.8137880564460006e-1,   -1.2356400639824631e-1),
          C(  -9.8137880564460006e-1,    1.2356400639824631e-1),
          C(   9.9179888160379888e-1,   -1.2655175187802661e-1),
          C(   9.9179888160379888e-1,    1.2655175187802661e-1),
          C(  -9.7174288409566869e-1,   -1.8474466025659875e-1),
          C(  -9.7174288409566869e-1,    1.8474466025659875e-1),
          C(   9.8159607864371487e-1,   -1.8911800535060428e-1),
          C(   9.8159607864371487e-1,    1.8911800535060428e-1),
          C(  -9.5830482446213420e-1,   -2.4520629052253052e-1),
          C(  -9.5830482446213420e-1,    2.4520629052253052e-1),
          C(   9.6739989973470035e-1,   -2.5084497224479815e-1),
          C(   9.6739989973470035e-1,    2.5084497224479815e-1),
          C(  -9.4111661502740260e-1,   -3.0471353782801531e-1),
          C(  -9.4111661502740260e-1,    3.0471353782801531e-1),
          C(   9.4929228334194820e-1,   -3.1147115980546382e-1),
          C(   9.4929228334194820e-1,    3.1147115980546382e-1),
          C(  -9.2024475286054842e-1,   -3.6303471982876475e-1),
          C(  -9.2024475286054842e-1,    3.6303471982876475e-1),
          C(   9.2737203021139549e-1,   -3.7074726293942903e-1),
          C(   9.2737203021139549e-1,    3.7074726293942903e-1),
          C(  -8.9576998691730699e-1,   -4.1994272344596489e-1),
          C(  -8.9576998691730699e-1,    4.1994272344596489e-1),
          C(   9.0175208866097765e-1,   -4.2843629241945660e-1),
          C(   9.0175208866097765e-1,    4.2843629241945660e-1),
          C(  -8.6778700610921085e-1,   -4.7521587924554104e-1),
          C(  -8.6778700610921085e-1,    4.7521587924554104e-1),
          C(   8.7255754525765753e-1,   -4.8431313108309807e-1),
          C(   8.7255754525765753e-1,    4.8431313108309807e-1),
          C(  -8.3640407356408492e-1,   -5.2863881452853578e-1),
          C(  -8.3640407356408492e-1,    5.2863881452853578e-1),
          C(   8.3992429768819792e-1,   -5.3816391730580617e-1),
          C(   8.3992429768819792e-1,    5.3816391730580617e-1),
          C(  -8.0174260851379904e-1,   -5.8000328178470286e-1),
          C(  -8.0174260851379904e-1,    5.8000328178470286e-1),
          C(   8.0399825144494044e-1,   -5.8978551546137712e-1),
          C(   8.0399825144494044e-1,    5.8978551546137712e-1),
          C(  -7.6393671745320223e-1,   -6.2910895925205929e-1),
          C(  -7.6393671745320223e-1,    6.2910895925205929e-1),
          C(   7.6493484955158666e-1,   -6.3898519539159934e-1),
          C(   7.6493484955158666e-1,    6.3898519539159934e-1),
          C(  -7.2313267641698183e-1,   -6.7576422042746008e-1),
          C(  -7.2313267641698183e-1,    6.7576422042746008e-1),
          C(   7.2289877095787362e-1,   -6.8558054569779086e-1),
          C(   7.2289877095787362e-1,    6.8558054569779086e-1),
          C(  -6.7948836641833358e-1,   -7.1978686948676718e-1),
          C(  -6.7948836641833358e-1,    7.1978686948676718e-1),
          C(   6.7806367983274955e-1,   -7.2939959254450148e-1),
          C(   6.7806367983274955e-1,    7.2939959254450148e-1),
          C(  -6.3317266428443694e-1,   -7.6100483969732628e-1),
          C(  -6.3317266428443694e-1,    7.6100483969732628e-1),
          C(   6.3061195253077064e-1,   -7.7028107493375758e-1),
          C(   6.3061195253077064e-1,    7.7028107493375758e-1),
          C(  -5.8436479130857097e-1,   -7.9925685203964513e-1),
          C(  -5.8436479130857097e-1,    7.9925685203964513e-1),
          C(   5.8073434297953053e-1,   -8.0807482543619256e-1),
          C(   5.8073434297953053e-1,    8.0807482543619256e-1),
          C(  -5.3325362231721504e-1,   -8.3439303139875248e-1),
          C(  -5.3325362231721504e-1,    8.3439303139875248e-1),
          C(   5.2862956986151024e-1,   -8.4264221198688625e-1),
          C(   5.2862956986151024e-1,    8.4264221198688625e-1),
          C(  -4.8003695792279393e-1,   -8.6627547783805396e-1),
          C(  -4.8003695792279393e-1,    8.6627547783805396e-1),
          C(   4.7450382253392917e-1,   -8.7385660553921818e-1),
          C(   4.7450382253392917e-1,    8.7385660553921818e-1),
          C(  -4.2492076289924772e-1,   -8.9477879062894137e-1),
          C(  -4.2492076289924772e-1,    8.9477879062894137e-1),
          C(   4.1857018996981702e-1,   -9.0160384716683283e-1),
          C(   4.1857018996981702e-1,    9.0160384716683283e-1),
          C(  -3.6811837377905891e-1,   -9.1979054287734920e-1),
          C(  -3.6811837377905891e-1,    9.1979054287734920e-1),
          C(   3.6104802046116931e-1,   -9.2578269549650457e-1),
          C(   3.6104802046116931e-1,    9.2578269549650457e-1),
          C(  -3.0984967892789275e-1,   -9.4121170476337907e-1),
          C(  -3.0984967892789275e-1,    9.4121170476337907e-1),
          C(   3.0216222105555556e-1,   -9.4630524095771044e-1),
          C(   3.0216222105555556e-1,    9.4630524095771044e-1),
          C(  -2.5034027450826669e-1,   -9.5895701359171246e-1),
          C(  -2.5034027450826669e-1,    9.5895701359171246e-1),
          C(   2.4214250575668532e-1,   -9.6309727745213613e-1),
          C(   2.4214250575668532e-1,    9.6309727745213613e-1),
          C(  -1.8982059989899265e-1,   -9.7295528903880697e-1),
          C(  -1.8982059989899265e-1,    9.7295528903880697e-1),
          C(   1.8122260103282805e-1,   -9.7609862499392833e-1),
          C(   1.8122260103282805e-1,    9.7609862499392833e-1),
          C(  -1.2852505629570078e-1,   -9.8314969217835265e-1),
          C(  -1.2852505629570078e-1,    9.8314969217835265e-1),
          C(   1.1963941649121555e-1,   -9.8526339895360154e-1),
          C(   1.1963941649121555e-1,    9.8526339895360154e-1),
          C(  -6.6691112383777784e-2,   -9.8949792707051163e-1),
          C(  -6.6691112383777784e-2,    9.8949792707051163e-1),
          C(   5.7632187869294091e-2,   -9.9056022300507371e-1),
          C(   5.7632187869294091e-2,    9.9056022300507371e-1),
          C(  -4.5584011540597041e-3,   -9.9197238391573373e-1),
          C(  -4.5584011540597041e-3,    9.9197238391573373e-1)]
};

const lgdz = {
    5:   [  -9.0617984593866399e-1,
            -5.3846931010568309e-1,
                                 0,
             5.3846931010568309e-1,
             9.0617984593866399e-1],
    10:  [  -9.7390652851717172e-1,
            -8.6506336668898451e-1,
            -6.7940956829902441e-1,
            -4.3339539412924719e-1,
            -1.4887433898163121e-1,
             1.4887433898163121e-1,
             4.3339539412924719e-1,
             6.7940956829902441e-1,
             8.6506336668898451e-1,
             9.7390652851717172e-1],
    15:  [  -9.8799251802048543e-1,
            -9.3727339240070590e-1,
            -8.4820658341042722e-1,
            -7.2441773136017005e-1,
            -5.7097217260853885e-1,
            -3.9415134707756337e-1,
            -2.0119409399743452e-1,
                                 0,
             2.0119409399743452e-1,
             3.9415134707756337e-1,
             5.7097217260853885e-1,
             7.2441773136017005e-1,
             8.4820658341042722e-1,
             9.3727339240070590e-1,
             9.8799251802048543e-1],
    20:  [  -9.9312859918509492e-1,
            -9.6397192727791379e-1,
            -9.1223442825132591e-1,
            -8.3911697182221882e-1,
            -7.4633190646015079e-1,
            -6.3605368072651503e-1,
            -5.1086700195082710e-1,
            -3.7370608871541956e-1,
            -2.2778585114164508e-1,
            -7.6526521133497334e-2,
             7.6526521133497334e-2,
             2.2778585114164508e-1,
             3.7370608871541956e-1,
             5.1086700195082710e-1,
             6.3605368072651503e-1,
             7.4633190646015079e-1,
             8.3911697182221882e-1,
             9.1223442825132591e-1,
             9.6397192727791379e-1,
             9.9312859918509492e-1],
    24:  [  -9.9518721999702136e-1,
            -9.7472855597130950e-1,
            -9.3827455200273276e-1,
            -8.8641552700440103e-1,
            -8.2000198597390292e-1,
            -7.4012419157855436e-1,
            -6.4809365193697557e-1,
            -5.4542147138883954e-1,
            -4.3379350762604514e-1,
            -3.1504267969616337e-1,
            -1.9111886747361631e-1,
            -6.4056892862605626e-2,
             6.4056892862605626e-2,
             1.9111886747361631e-1,
             3.1504267969616337e-1,
             4.3379350762604514e-1,
             5.4542147138883954e-1,
             6.4809365193697557e-1,
             7.4012419157855436e-1,
             8.2000198597390292e-1,
             8.8641552700440103e-1,
             9.3827455200273276e-1,
             9.7472855597130950e-1,
             9.9518721999702136e-1],
    50:  [  -9.9886640442007105e-1,
            -9.9403196943209071e-1,
            -9.8535408404800588e-1,
            -9.7286438510669207e-1,
            -9.5661095524280794e-1,
            -9.3665661894487793e-1,
            -9.1307855665579189e-1,
            -8.8596797952361305e-1,
            -8.5542976942994608e-1,
            -8.2158207085933595e-1,
            -7.8455583290039926e-1,
            -7.4449430222606854e-1,
            -7.0155246870682225e-1,
            -6.5589646568543936e-1,
            -6.0770292718495024e-1,
            -5.5715830451465005e-1,
            -5.0445814490746420e-1,
            -4.4980633497403879e-1,
            -3.9341431189756513e-1,
            -3.3550024541943736e-1,
            -2.7628819377953199e-1,
            -2.1600723687604176e-1,
            -1.5489058999814590e-1,
            -9.3174701560086141e-2,
            -3.1098338327188876e-2,
             3.1098338327188876e-2,
             9.3174701560086141e-2,
             1.5489058999814590e-1,
             2.1600723687604176e-1,
             2.7628819377953199e-1,
             3.3550024541943736e-1,
             3.9341431189756513e-1,
             4.4980633497403879e-1,
             5.0445814490746420e-1,
             5.5715830451465005e-1,
             6.0770292718495024e-1,
             6.5589646568543936e-1,
             7.0155246870682225e-1,
             7.4449430222606854e-1,
             7.8455583290039926e-1,
             8.2158207085933595e-1,
             8.5542976942994608e-1,
             8.8596797952361305e-1,
             9.1307855665579189e-1,
             9.3665661894487793e-1,
             9.5661095524280794e-1,
             9.7286438510669207e-1,
             9.8535408404800588e-1,
             9.9403196943209071e-1,
             9.9886640442007105e-1],
    100: [  -9.9971372677344123e-1,
            -9.9849195063959582e-1,
            -9.9629513473312515e-1,
            -9.9312493703744346e-1,
            -9.8898439524299175e-1,
            -9.8387754070605702e-1,
            -9.7780935848691829e-1,
            -9.7078577576370633e-1,
            -9.6281365425581553e-1,
            -9.5390078292549174e-1,
            -9.4405587013625598e-1,
            -9.3328853504307955e-1,
            -9.2160929814533395e-1,
            -9.0902957098252969e-1,
            -8.9556164497072699e-1,
            -8.8121867938501842e-1,
            -8.6601468849716462e-1,
            -8.4996452787959128e-1,
            -8.3308387988840082e-1,
            -8.1538923833917625e-1,
            -7.9689789239031448e-1,
            -7.7762790964949548e-1,
            -7.5759811851970718e-1,
            -7.3682808980202071e-1,
            -7.1533811757305645e-1,
            -6.9314919935580197e-1,
            -6.7028301560314102e-1,
            -6.4676190851412928e-1,
            -6.2260886020370777e-1,
            -5.9784747024717872e-1,
            -5.7250193262138119e-1,
            -5.4659701206509417e-1,
            -5.2015801988176306e-1,
            -4.9321078920819093e-1,
            -4.6578164977335804e-1,
            -4.3789740217203151e-1,
            -4.0958529167830154e-1,
            -3.8087298162462996e-1,
            -3.5178852637242172e-1,
            -3.2236034390052915e-1,
            -2.9261718803847196e-1,
            -2.6258812037150348e-1,
            -2.3230248184497397e-1,
            -2.0178986409573600e-1,
            -1.7108008053860327e-1,
            -1.4020313723611397e-1,
            -1.0918920358006112e-1,
            -7.8068582813436637e-2,
            -4.6871682421591632e-2,
            -1.5628984421543083e-2,
             1.5628984421543083e-2,
             4.6871682421591632e-2,
             7.8068582813436637e-2,
             1.0918920358006112e-1,
             1.4020313723611397e-1,
             1.7108008053860327e-1,
             2.0178986409573600e-1,
             2.3230248184497397e-1,
             2.6258812037150348e-1,
             2.9261718803847196e-1,
             3.2236034390052915e-1,
             3.5178852637242172e-1,
             3.8087298162462996e-1,
             4.0958529167830154e-1,
             4.3789740217203151e-1,
             4.6578164977335804e-1,
             4.9321078920819093e-1,
             5.2015801988176306e-1,
             5.4659701206509417e-1,
             5.7250193262138119e-1,
             5.9784747024717872e-1,
             6.2260886020370777e-1,
             6.4676190851412928e-1,
             6.7028301560314102e-1,
             6.9314919935580197e-1,
             7.1533811757305645e-1,
             7.3682808980202071e-1,
             7.5759811851970718e-1,
             7.7762790964949548e-1,
             7.9689789239031448e-1,
             8.1538923833917625e-1,
             8.3308387988840082e-1,
             8.4996452787959128e-1,
             8.6601468849716462e-1,
             8.8121867938501842e-1,
             8.9556164497072699e-1,
             9.0902957098252969e-1,
             9.2160929814533395e-1,
             9.3328853504307955e-1,
             9.4405587013625598e-1,
             9.5390078292549174e-1,
             9.6281365425581553e-1,
             9.7078577576370633e-1,
             9.7780935848691829e-1,
             9.8387754070605702e-1,
             9.8898439524299175e-1,
             9.9312493703744346e-1,
             9.9629513473312515e-1,
             9.9849195063959582e-1,
             9.9971372677344123e-1]
};

let farloiz = [C(  -5.0000000000000000e-1,    -1.3228756555322953e0),
               C(  -5.0000000000000000e-1,     1.3228756555322953e0),
               C(  -5.0000000000000000e-1,    -1.6583123951776999e0),
               C(  -5.0000000000000000e-1,     1.6583123951776999e0)];
farloiz = farloiz.concat(farloiz);
farloiz = farloiz.concat(farloiz);

const toh02z =
      [C(  -6.4273026408596663e-1,   -7.4497139420566048e-2),
       C(  -6.4273026408596663e-1,    7.4497139420566048e-2),
       C(  -6.1611009709080245e-1,   -2.2255230874207497e-1),
       C(  -6.1611009709080245e-1,    2.2255230874207497e-1),
       C(  -5.6209888020015190e-1,   -3.6770724207632826e-1),
       C(  -5.6209888020015190e-1,    3.6770724207632826e-1),
       C(  -4.7903273599213820e-1,   -5.0773158889048364e-1),
       C(  -4.7903273599213820e-1,    5.0773158889048364e-1),
       C(  -3.6406222857650046e-1,   -6.3986739119698156e-1),
       C(  -3.6406222857650046e-1,    6.3986739119698156e-1),
       C(  -2.1255469312513289e-1,   -7.6040546396800965e-1),
       C(  -2.1255469312513289e-1,    7.6040546396800965e-1),
       C(  -1.6840640743750734e-2,   -8.6388496107329865e-1),
       C(  -1.6840640743750734e-2,    8.6388496107329865e-1),
       C(    1.0804584245908354e0,   -9.2291979046774876e-1),
       C(    1.0804584245908354e0,    9.2291979046774876e-1),
       C(   2.3672740822526821e-1,   -9.4133582606707251e-1),
       C(   2.3672740822526821e-1,    9.4133582606707251e-1),
       C(   5.7624370699833966e-1,   -9.7554880155012275e-1),
       C(   5.7624370699833966e-1,    9.7554880155012275e-1)];
const toh06az =
      [C(  -9.8883082622512855e-1,   -1.4904226617617445e-1),
       C(  -9.8883082622512855e-1,    1.4904226617617445e-1),
       C(   9.5557280578614073e-1,   -2.9475517441090422e-1),
       C(   9.5557280578614073e-1,    2.9475517441090422e-1),
       C(  -9.0096886790241913e-1,   -4.3388373911755812e-1),
       C(  -9.0096886790241913e-1,    4.3388373911755812e-1),
       C(   8.2623877431599487e-1,   -5.6332005806362203e-1),
       C(   8.2623877431599487e-1,    5.6332005806362203e-1),
       C(  -7.3305187182982633e-1,   -6.8017273777091939e-1),
       C(  -7.3305187182982633e-1,    6.8017273777091939e-1),
       C(   6.2348980185873353e-1,   -7.8183148246802981e-1),
       C(   6.2348980185873353e-1,    7.8183148246802981e-1),
       C(  -5.0000000000000000e-1,   -8.6602540378443865e-1),
       C(  -5.0000000000000000e-1,    8.6602540378443865e-1),
       C(   3.6534102436639501e-1,   -9.3087374864420426e-1),
       C(   3.6534102436639501e-1,    9.3087374864420426e-1),
       C(  -2.2252093395631440e-1,   -9.7492791218182361e-1),
       C(  -2.2252093395631440e-1,    9.7492791218182361e-1),
       C(   7.4730093586424254e-2,   -9.9720379718118015e-1),
       C(   7.4730093586424254e-2,    9.9720379718118015e-1)];
let toh06bz =
    [C(  -9.5949297361449739e-1,   -2.8173255684142970e-1),
     C(  -9.5949297361449739e-1,    2.8173255684142970e-1),
     C(   8.4125353283118117e-1,   -5.4064081745559758e-1),
     C(   8.4125353283118117e-1,    5.4064081745559758e-1),
     C(  -6.5486073394528506e-1,   -7.5574957435425828e-1),
     C(  -6.5486073394528506e-1,    7.5574957435425828e-1),
     C(   4.1541501300188643e-1,   -9.0963199535451837e-1),
     C(   4.1541501300188643e-1,    9.0963199535451837e-1),
     C(  -1.4231483827328514e-1,   -9.8982144188093273e-1),
     C(  -1.4231483827328514e-1,    9.8982144188093273e-1)];
toh06bz = toh06bz.concat(toh06bz);
let toh06cz =
    [C(   -1.0000000000000000e0,                        0),
     C(  -5.0000000000000000e-1,   -8.6602540378443865e-1),
     C(  -5.0000000000000000e-1,    8.6602540378443865e-1),
     C(   5.0000000000000000e-1,   -8.6602540378443865e-1),
     C(   5.0000000000000000e-1,    8.6602540378443865e-1)];
toh06cz = toh06cz.concat(toh06cz);
toh06cz = toh06cz.concat(toh06cz);


/* The standard test polynomials.
 *
 * Each entry in TEST_POLYS is an object with the following keys:
 *   p: The polynomial to test, a `Polynomial` instance.
 *   z: The (accurate) actual roots of the polynomial.
 * In addition, `readPolys()` may fill in the property
 *   zFortran: The roots of the polynomial as computed by the Fortran code.
 */
const TEST_POLYS = {
    // Jenkins--Traub test polynomials
    jt01a: jt01(10**10),
    jt01b: jt01(10**-10),
    jt02: PR(...range(1, 18)),
    jt03: PR(...range(1, 9, 1, x => 1/10**x)),
    jt04: PR(0.5, 0.6, 0.7, [0.1, 3]),
    jt05: PR(0.4, [0.3, 2], [0.2, 3], [0.1, 4]),
    jt06: PR(.1, 1.001, .998, 1.00002, .99999),
    jt07a: jt07(10**-10),
    jt07b: jt07(10**-9),
    jt07c: jt07(10**-8),
    jt07d: jt07(10**-7),
    jt08: PR([-1, 5]),
    jt09: {p: P(1, ...constant(0, 9), -(10**-20))
           .mult(P(1, ...constant(0, 9), 10**20)),
           z: jt09z},
    jt10a: jt10(10**3),
    jt10b: jt10(10**6),
    jt10c: jt10(10**9),
    jt11a: jt11(15),
    jt11b: jt11(20),
    jt11c: jt11(25),

    // Uhlig test polynomials
    uhlig01: uhlig(.01),
    uhlig02: uhlig(.001),
    uhlig05: PR([-1, 6], [2, 2]),

    // Goedecker test polynomials
    fib05:  fib(5),
    fib10:  fib(10),
    fib15:  fib(15),
    fib20:  fib(20),
    fib30:  fib(30),
    fib50:  fib(50),
    fib100: fib(100),
    fibsq04: fibsq(4),
    fibsq08: fibsq(8),
    fibsq16: fibsq(16),
    fibsq24: fibsq(24),
    fibsq32: fibsq(32),
    fibsq48: fibsq(48),
    lgd05: lgd(5),
    lgd10: lgd(10),
    lgd15: lgd(15),
    lgd20: lgd(20),
    lgd24: lgd(24),
    lgd50: lgd(50),
    lgd100: lgd(100),

    // Modified Farmer--Loizou test polynomials
    fl01: fl(1),
    fl02: fl(2),
    fl03: fl(3),
    fl04: fl(4),
    fl05: fl(5),
    fl06: fl(6),
    farloi01: {p: P(1,1,2).mult(P(1,1,3)).pow(4), z: farloiz},

    // Petcovic test polynomials
    petk05: {p: P(1, -3).pow(2).mult(P(1, -2, 5).pow(2)).mult(P(1, 1).pow(3)),
             z: [[3, 2], [-1, 3], [C(1, 2), 2], [C(1, -2), 2]]},
    petk07: {p: P(1, -1).pow(3).mult(P(1, 4, 5)).mult(P(1, 0, 25).pow(2)),
             z: [[1, 3], C(-2, 1), C(-2, -1), [C(0, 5), 2], [C(0, -5), 2]]},
    henrici: PR(-4.1, -3.8, -2.05, -1.85, 1.95, 2.15, 3.9, 4.05),

    // Brugano--Trigiante test polynomials
    bt01: {p: P(1, -1).pow(6).mult(P(1, 1).pow(2))
           .mult(P(1, 0, 1).pow(3)).mult(P(1, -2)),
           z: [[1, 6], [-1, 2], [C(0, 1), 3], [C(0, -1), 3], 2]},
    bt02: {p: P(1, -1).pow(10).mult(P(1, 1).pow(2))
           .mult(P(1, 0, 1)).mult(P(1, -2)),
           z: [[1, 10], [-1, 2], C(0,1), C(0, -1), 2]},
    bt03: {p: P(1, 0, 1).pow(5).mult(P(1, 0, 1/4).pow(4)).mult(P(1, 0, 9/16)),
           z: [[C(0, 1), 5], [C(0, -1), 5], [C(0, 1/2), 4], [C(0, -1/2), 4],
               C(0, 1/4), C(0, -1/4)]},
    bt04: {p: P(1, -1).pow(3).mult(P(1, 1).pow(4))
           .mult(P(1, -1, 5/4).pow(3)).mult(P(1, -1, 1/2).pow(2)),
           z: [[1, 3], [-1, 4], [C(1/2, 1), 3], [C(1/2, -1), 3],
               [C(1/2, 1/2), 2], [C(1/2, -1/2), 2]]},

    // The Iliev test polynomial and its modifications
    iliev00: iliev(1),
    iliev01: iliev(2),
    iliev02: iliev(4),
    iliev03: iliev(8),

    // The Igarashi--Ypma test polynomials
    igyp00: PR(2.35, 2.37, 2.39),
    igyp01: PR([2.35, 3], 2.56),

    // The Toh--Trefethen test polynomials
    toh02: {p: P(...range(20, -1, -1, k => 10**k/fact(k))), z: toh02z},
    toh03: PR(...range(1, 21, 1, k => 10/11 - 2**(-k))),
    toh04: PR([10/11, 20]),
    toh05: PR(...range(0, 20, 1, k => 2**(-k))),
    toh06a: {p: P(...constant(1, 21)), z: toh06az},
    toh06b: {p: P(...constant(1, 11)).pow(2), z: toh06bz},
    toh06c: {p: P(...constant(1, 6)).pow(4), z: toh06cz},

    // The Zeng test polynomials
    twin01: twin(4),
    twin02: twin(8),
    twin03: twin(12),
    twin04: twin(16),
    triple01: triple(5, 5, 5),
    triple02: triple(10, 10, 10),
    triple03: triple(18, 10, 16),
    triple04: triple(20, 15, 10),
    inex: PR([10/11, 5], [20/11, 3], [30/11, 2]),
    near01: near(0.1),
    near02: near(0.01),
    near03: near(0.001),
    large01: large01,
    large02: large02,
    large03: large03,
};


/* Compute how far apart `roots` is from `z`.
 *
 * Both are lists of roots of the same polynomial, presumably computed in
 * different ways.  The comparison can happen in one of two ways.  If
 * `sameOrder` is `false`, then for each root in `z1`, the closest root in `z2`
 * is found; this pair is saved, the difference is computed, and the algorithm
 * continues.  If `sameOrder` is true, then `z1[i]` is compared against `z2[i]`.
 * The modulus of the maximum difference is returned.  The differences are
 * scaled by the modulus of the closest root in `z2`.
 */
function evaluateRoots(z1, z2, sameOrder=false) {
    z1 = flattenRoots(z1);
    z2 = flattenRoots(z2);
    // Match up the roots
    let diffs = [];
    for(const r of z1) {
        let closest;
        if(!sameOrder) {
            z2.sort((a, b) => b.clone().sub(r).mod - a.clone().sub(r).mod);
            closest = z2.pop();
        } else
            closest = z2.shift();
        let diff = closest.clone().sub(r).mod;
        if(closest.mod !== 0) diff /= closest.mod;
        diffs.push(diff);
    }
    return Math.max(...diffs);
}


/* Entry point when run in script mode. */
async function main() {
    if(process.argv[2] === 'export') {
        const ws = fs.createWriteStream(process.argv[3]);

        let polys = {};
        if(process.argv[4] !== undefined) {
            for(const name of process.argv.slice(4))
                polys[name] = TEST_POLYS[name];
        } else polys = TEST_POLYS;

        for(const [name, {p, z}] of Object.entries(polys)) {
            if(p.deg > 100)
                continue;
            ws.write(name + "\n");
            ws.write(p.deg + "\n");
            for(const coeff of p)
                ws.write(coeff + "\n");
            for(const [re, im] of flattenRoots(z))
                ws.write(`${re} ${im}\n`);
        }

        ws.close();
        return;
    }

    let args = process.argv.slice(2);
    let polys = [];
    while(args.length > 0) {
        const arg = args.shift();
        if(arg === "import") {
            const fn = args.shift();
            const colon = fn.indexOf(":");
            const zName = fn.slice(0, colon);
            const fName = fn.slice(colon+1);
            await readPolys(fName, TEST_POLYS, zName);
        } else
            polys.push(arg);
    }
    if(polys.length === 0) polys = Object.keys(TEST_POLYS);

    const fmt = d => d === 0 ? '-----' : d.toExponential(0).padStart(5);

    for(const name of polys) {
        const {p, z, zFortran} = TEST_POLYS[name];
        const myZ = rpoly(p).map(([a, b]) => C(a, b));
        const diff1 = evaluateRoots(myZ, z);
        if(zFortran) {
            const diff2 = evaluateRoots(myZ, zFortran);
            const diff3 = evaluateRoots(zFortran, z);
            console.log(`${name.padStart(10)} ${fmt(diff2)} ${fmt(diff1)} ${fmt(diff3)}`);
        } else
            console.log(`${name.padStart(10)} ${fmt(diff1)}`);
    }
}

if(typeof describe === 'undefined')
    main();

else {
    before(async function() {
        await readPolys(path.join("test", "testpolys-out.txt"), TEST_POLYS, "zFortran");
    });

    describe('rpoly', function() {
        for(const name of Object.keys(TEST_POLYS)) {
            it(`should factor ${name}`, async function() {
                const {p, z, zFortran} = TEST_POLYS[name];
                const myZ = rpoly(p).map(([a, b]) => C(a, b));
                evaluateRoots(myZ, zFortran, true).should.equal(0);
            });
        }
    });
}

